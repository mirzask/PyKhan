import numpy as np


# Create a vector of zeros:

zero_vector = np.zeros(5)
print(zero_vector)


# Create a matrix of zeros:
##the tuple argument is (_rows_, _columns_)

zero_matrix = np.zeros((5,3))
print(zero_matrix)

# Create a vector and matrix array:

x = np.array([1,2,3])
y = np.array([2,4,6])

A = np.array([[1,3], [5,9]])

print(x)
print(A)

# Transpose a matrix array w/ transpose method:
## first row -> first column, second row -> second column, etc
print(A.transpose())


# Dimensions and Length of array - `shape`, `size` data attributes

X = np.array([[1,2,3], [4,5,6]])

print(X.shape) # gives dimensions
print(X.size) # gives length

# Indexing and Slicing

x = np.array([1,2,3])
y = np.array([2,4,6])

X = np.array([[1,2,3], [4,5,6]])
Y = np.array([[2,4,6], [8,10,12]])

## with Vectors
print(x[2])

print(x[0:2])

z = x + y
print(z)

## with Matrices

# Get the 1st column of X
print(X[:,1])

# Get the 1st column of Y
print(Y[:,1])

# Add the 1st column of X and Y
print(X[:,1] + Y[:,1])

# Get the 1st row of X
print(X[1,:])

# Add 1st row of X and 1st row of Y

print(X[1,:] + Y[1,:])

# Indexing like a boss

z1 = np.array([1,3,5,7,9])

z2 = z1 + 1

print(z1)
print(z2)

# Get the 0th, 2nd and 3rd elements
ind = [0,2,3]

print(z1[ind])

# Logical indexing

print(z1 > 6)


# Get only those values that are True/False from boolean array

print(z1[z1 > 6])

print(z2[z1 > 6])

ind = z1 > 6

print(z1[ind])
print(z2[ind])

# Modify value of array

## Slicing approach

z1 = np.array([1,3,5,7,9])

w = z1[0:3]

print(w)

## Change 0th element to '3'

w[0] = 3

print(w)

print(z1) # uh oh, z1 was also modified!

# Try w/ indexing

z1 = np.array([1,3,5,7,9])

ind = [0,1,2]

w = z1[ind]

print(w)

## Change 0th element to '3'

w[0] = 3

print(w)
print(z1) # z1 is unchanged if you use the index approach!


## Recap, index gives copy + slice does not


# linspace - create an array of "linearly spaced" values from a,b

## Create array of 10 linearly spaced elements from 0 to 100
zero_hundy = np.linspace(0,100, 10)

print(zero_hundy)

# logspace - array of "logarithmically spaced" values from a,b

## Create array of 10 logarithmically spaced elements from 10 to 100
## log of 10 is 1, log of 100 is 2
zero_hundlog = np.logspace(1,2,10)

print(zero_hundlog)

## Create array of 10 logarithmically spaced elements from 250 to 500

log_example = np.logspace(np.log10(250), np.log10(500), 10)

print(log_example)


# Logical Conditions with `any` or `all` methods

# Create 10 random numbers from normal distribution of 0 to 1

x = np.random.random(10)

print(x)

# Are any elements greater than 0.9?

print(np.any(x > 0.9))

# Are ALL elements greater than or equal 0.1?

print(np.all(x >= 0.1))